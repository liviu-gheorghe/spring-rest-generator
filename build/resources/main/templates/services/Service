package {packageName}.services;

import {packageName}.errors.NotFoundError;
import {packageName}.models.{modelNameCapitalized};
import {packageName}.repositories.{modelNameCapitalized}Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class {modelNameCapitalized}Service implements IService<{modelNameCapitalized}> {

    @Autowired
    {modelNameCapitalized}Repository {modelName}Repository;

    @Override
    public List<{modelNameCapitalized}> getAll() {
        List<{modelNameCapitalized}> {modelNamePlural} = new ArrayList<>();
        {modelName}Repository.findAll().iterator().forEachRemaining(
                {modelNamePlural}::add
        );
        return {modelNamePlural};
    }

    @Override
    public List<{modelNameCapitalized}> getById(Integer id) {
        {modelNameCapitalized} result = {modelName}Repository.findById(id).orElse(null);
        if(result == null)
            return null;
        return Collections.singletonList(result);
    }

    @Override
    public List<{modelNameCapitalized}> add({modelNameCapitalized} {modelName}) {
        {modelNameCapitalized} a = {modelName}Repository.save({modelName});
        return Collections.singletonList(a);
    }

    @Override
    public List<{modelNameCapitalized}> update({modelNameCapitalized} {modelName}) {
        if(!{modelName}Repository.existsById({modelName}.getId())) {
            throw new NotFoundError();
        }
        {modelName}Repository.save({modelName});
        return Collections.singletonList({modelName});
    }

    @Override
    public List<{modelNameCapitalized}> delete(Integer id) {
        {modelNameCapitalized} {modelName} = {modelName}Repository.findById(id).orElse(null);
        if({modelName} == null) {
            throw new NotFoundError();
        }
        {modelName}Repository.deleteById(id);
        return Collections.singletonList({modelName});
    }
}